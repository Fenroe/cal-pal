import Head from 'next/head'
import Button from 'react-bootstrap/Button'
import Form from 'react-bootstrap/Form'
import Container from 'react-bootstrap/Container'
import Navbar from 'react-bootstrap/Navbar'
import Nav from 'react-bootstrap/Nav'
import 'bootstrap/dist/css/bootstrap.min.css'
import { useState } from 'react'

export default function Home() {
  const [addRecipeChecked, setAddRecipeChecked] = useState(false)

  const [ingredientsData, setIngredientsData] = useState([
    {
      tag: 0,
      text: ''
    }
  ])

  const [recipeStepsData, setRecipeStepsData] = useState([
    {
      tag: 0,
      text: ''
    }
  ])

  const handleChangeAddRecipe = () => {
    setAddRecipeChecked(!addRecipeChecked)
  }

  const addIngredient = () => {
    const newIngredientsData = ingredientsData
    const newIngredient = {
      tag: newIngredientsData[newIngredientsData.length - 1].tag + 1,
      text: ''
    }
    newIngredientsData.push(newIngredient)
    setIngredientsData([...newIngredientsData])
  }

  const updateIngredient = (e) => {
    const tag = parseInt(e.target.dataset.tag)
    const updatedIngredientsData = ingredientsData
    updatedIngredientsData.forEach((ingredient) => {
      if (ingredient.tag === tag) {
        ingredient.text = e.target.value
      }
    })
    setIngredientsData([...updatedIngredientsData])
  }

  const removeIngredient = (e) => {
    const tag = parseInt(e.target.dataset.tag)
    const updatedIngredientsData = ingredientsData.filter((ingredient) => {
      if (ingredient.tag !== tag) {
        return ingredient
      }
    })
    setIngredientsData([...updatedIngredientsData])
  }

  const addRecipeStep = () => {
    const newRecipeStepsData = recipeStepsData
    const newRecipeStep = {
      tag: newRecipeStepsData[newRecipeStepsData.length - 1].tag + 1,
      text: ''
    }
    newRecipeStepsData.push(newRecipeStep)
    setRecipeStepsData([...newRecipeStepsData])
  }

  const updateRecipeStep = (e) => {
    const tag = parseInt(e.target.dataset.tag)
    const updatedRecipeStepsData = recipeStepsData
    updatedRecipeStepsData.forEach((step) => {
      if (step.tag === tag) {
        step.text = e.target.text
      }
    })
    setRecipeStepsData([...updatedRecipeStepsData])
  }

  const removeRecipeStep = (e) => {
    const tag = parseInt(e.target.dataset.tag)
    const updatedRecipeStepsData = recipeStepsData.filter((step) => {
      if (step.tag !== tag) {
        return step
      }
    })
    setRecipeStepsData([... updatedRecipeStepsData])
  }

  return (
    <div>
      <Head>
        <title>Cal Pal</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar bg="light" variant="light">
        <Container>
          <Navbar.Brand href="/">Cal Pal</Navbar.Brand>
          <Nav>
            <Nav.Link>Planner</Nav.Link>
            <Nav.Link>Meals</Nav.Link>
            <Nav.Link>Discover</Nav.Link>
          </Nav>
        </Container>
      </Navbar>

      <main>
        <Container>
          <Form>
            <h2>Add a new meal</h2>
            <p>Fields marked with an * are required</p>
            <Form.Group controlId="mealName">
              <Form.Label>Name*</Form.Label>
              <Form.Control type="text" placeholder="Name" />
            </Form.Group>
            <Form.Group controlId="mealDescription">
              <Form.Label>Description</Form.Label>
              <Form.Control as="textarea" placeholder="Description" rows={3} />
            </Form.Group>
            <Form.Group controlId="mealPictureLink">
              <Form.Label>Picture URL</Form.Label>
              <Form.Control type="url" placeholder="Picture URL" />
            </Form.Group>
            <Form.Group>
              <Form.Label>Meal type</Form.Label>
              <Form.Select>
                <option>Select a type</option>
                <option value="Breakfast">Breakfast</option>
                <option value="Lunch">Lunch</option>
                <option value="Dinner">Dinner</option>
                <option value="Snack">Snack</option>
              </Form.Select>
            </Form.Group>
            <Form.Group controlId="mealCalories">
              <Form.Label>Calories</Form.Label>
              <Form.Control type="number" placeholder="Calories" />
            </Form.Group>
            <Form.Check type="switch" id="recipeSwitch" label="Add a recipe?" checked={addRecipeChecked} onChange={handleChangeAddRecipe}/>
            {addRecipeChecked &&
            <fieldset>
              <Form.Group controlId="recipeLink">
                <Form.Label>Recipe URL</Form.Label>
                <Form.Control type="text" placeholder="Recipe URL" />
              </Form.Group>
              <h3>Or</h3>
              <h2>Ingredients</h2>
              {ingredientsData.map((ingredient) =>
              <Form.Group key={`ingredient ${ingredient.tag}`}>
                <Form.Control type="text" initialvalue={ingredient.text} data-tag={ingredient.tag} onChange={(e) => updateIngredient(e)}/>
                {ingredientsData.length > 1 && <Button data-tag={ingredient.tag} variant="danger" onClick={(e) => removeIngredient(e)}>Remove</Button>}
              </Form.Group>
              )}
              <Button onClick={addIngredient}>Add new ingredient</Button>
              <h2>Steps</h2>
              {recipeStepsData.map((step) =>
              <Form.Group key={`step ${step.tag}`}>
                <Form.Control as="textarea" rows={3} initialvalue={step.text} data-tag={step.tag} onChange={(e) => updateRecipeStep(e)} />
                {recipeStepsData.length > 1 && <Button data-tag={step.tag} variant="danger" onClick={(e) => removeRecipeStep(e)} >Remove</Button>}
              </Form.Group>
              )}
              <Button onClick={addRecipeStep}>Add new step</Button>
            </fieldset>
            }
          </Form>
          <Button>Submit</Button>
        </Container>
      </main>
    </div>
  )
}
